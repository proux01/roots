
<h1>The Coq Standard Library</h1>

<p>Here is a short description of the Coq standard library.
It provides a set of modules directly available
through the <tt>Require Import</tt> command.</p>

<p>The standard library is composed of the following subdirectories:</p>

<dl>
  <dt> <b>Logic</b>:
    Logic, dependent equality, extensionality, choice axioms in namespace Stdlib.Logic.
    Look at classical-logic for more elaborate results in namespace Stdlib.Logic.
  </dt>
  <dd>
    theories/Logic/Base/SetIsType.v
    theories/Logic/Base/StrictProp.v
    theories/Logic/Base/Decidable.v
    theories/Logic/Base/Eqdep_dec.v
    theories/Logic/Base/EqdepFacts.v
    theories/Logic/Base/Eqdep.v
    theories/Logic/Base/JMeq.v
    theories/Logic/Base/RelationalChoice.v
    theories/Logic/Base/Berardi.v
    theories/Logic/Base/Hurkens.v
    theories/Logic/Base/ProofIrrelevance.v
    theories/Logic/Base/ProofIrrelevanceFacts.v
    theories/Logic/Base/ConstructiveEpsilon.v
    theories/Logic/Base/PropExtensionalityFacts.v
    theories/Logic/Base/FunctionalExtensionality.v
    theories/Logic/Base/ExtensionalFunctionRepresentative.v
    theories/Logic/Base/ExtensionalityFacts.v
    theories/Logic/Base/WeakFan.v
    theories/Logic/Base/PropFacts.v
    theories/Logic/Base/HLevels.v
    theories/Logic/Base/Adjointification.v
  </dd>

  <dt> <b>Program</b>:
    Support for dependently-typed programming in namespace Stdlib.Program.
  </dt>
  <dd>
    theories/Program/All/Subset.v
    theories/Program/All/Equality.v
    theories/Program/All/Syntax.v
    theories/Program/All/WfExtensionality.v
    theories/Program/All/Program.v
    theories/Program/All/Combinators.v
  </dd>

  <dt> <b>Relations</b>:
    Relations (definitions and basic results) in namespace Stdlib.Relations.
  </dt>
  <dd>
    theories/Relations/All/Relation_Operators.v
    theories/Relations/All/Relations.v
    theories/Relations/All/Operators_Properties.v
  </dd>

  <dt> <b>Classes</b>:
    Classes in namespace Stdlib.Classes.
  </dt>
  <dd>
    theories/Classes/All/Morphisms_Relations.v
    theories/Classes/All/CEquivalence.v
    theories/Classes/All/SetoidClass.v
    theories/Classes/All/RelationPairs.v
    theories/Classes/All/DecidableClass.v
  </dd>

  <dt> <b>Bool</b>:
    Booleans (basic functions and results) in namespace Stdlib.Bool.
  </dt>
  <dd>
    theories/Bool/Bool.v
    theories/Bool/BoolEq.v
    theories/Bool/DecBool.v
    theories/Bool/IfProp.v
  </dd>

  <dt> <b>Structures</b>:
    Basic "algebraic" structures: types with decidable equality and with order
    in namespace Stdlib.Structures. Common instances can be found in orders-ex.
    More developped algebra can be found in the
    <a href="https://github.com/math-comp/math-comp">mathematical components
    library</a>.
  </dt>
  <dd>
    theories/Structures/Def/Equalities.v
    theories/Structures/Def/Orders.v
    theories/Structures/Def/OrdersTac.v
    theories/Structures/Def/OrdersFacts.v
    theories/Structures/Def/GenericMinMax.v
  </dd>

  <dt> <b>Arith-base</b>:
    Basic Peano Arithmetic in namespace Stdlib.Arith.
    Everything can be loaded with From Stdlib Require Import Arith_base.
    To enjoy the ring and lia automatic tactic, you additionally need to load
    arith below, using From Stdlib Require Import Arith Lia.
  </dt>
  <dd>
    theories/Arith/Base/PeanoNat.v
    theories/Arith/Base/Between.v
    theories/Arith/Base/Bool_nat.v
    theories/Arith/Base/Peano_dec.v
    theories/Arith/Base/Compare_dec.v
    (theories/Arith/Base/Arith_base.v)
    theories/Arith/Base/Compare.v
    theories/Arith/Base/EqNat.v
    theories/Arith/Base/Euclid.v
    theories/Arith/Base/Factorial.v
    theories/Arith/Base/Wf_nat.v
    theories/Arith/Base/Cantor.v
    theories/Arith/Base/Zerob.v
    theories/Numbers/NumPrelude.v
    theories/Numbers/NatInt/NZAdd.v
    theories/Numbers/NatInt/NZAddOrder.v
    theories/Numbers/NatInt/NZAxioms.v
    theories/Numbers/NatInt/NZBase.v
    theories/Numbers/NatInt/NZMul.v
    theories/Numbers/NatInt/NZDiv.v
    theories/Numbers/NatInt/NZMulOrder.v
    theories/Numbers/NatInt/NZOrder.v
    theories/Numbers/NatInt/NZParity.v
    theories/Numbers/NatInt/NZPow.v
    theories/Numbers/NatInt/NZSqrt.v
    theories/Numbers/NatInt/NZLog.v
    theories/Numbers/NatInt/NZGcd.v
    theories/Numbers/NatInt/NZBits.v
    theories/Numbers/Natural/Abstract/NAdd.v
    theories/Numbers/Natural/Abstract/NAddOrder.v
    theories/Numbers/Natural/Abstract/NAxioms.v
    theories/Numbers/Natural/Abstract/NBase.v
    theories/Numbers/Natural/Abstract/NMulOrder.v
    theories/Numbers/Natural/Abstract/NOrder.v
    theories/Numbers/Natural/Abstract/NStrongRec.v
    theories/Numbers/Natural/Abstract/NSub.v
    theories/Numbers/Natural/Abstract/NDiv.v
    theories/Numbers/Natural/Abstract/NDiv0.v
    theories/Numbers/Natural/Abstract/NMaxMin.v
    theories/Numbers/Natural/Abstract/NParity.v
    theories/Numbers/Natural/Abstract/NPow.v
    theories/Numbers/Natural/Abstract/NSqrt.v
    theories/Numbers/Natural/Abstract/NLog.v
    theories/Numbers/Natural/Abstract/NGcd.v
    theories/Numbers/Natural/Abstract/NLcm.v
    theories/Numbers/Natural/Abstract/NLcm0.v
    theories/Numbers/Natural/Abstract/NBits.v
    theories/Numbers/Natural/Abstract/NProperties.v
    theories/Classes/Arith/SetoidDec.v
  </dd>

  <dt> <b>Lists</b>:
    Polymorphic lists in namespace Stdlib.Lists.
  </dt>
  <dd>
    theories/Lists/List.v
    theories/Lists/ListDec.v
    theories/Lists/ListSet.v
    theories/Lists/ListTactics.v
    theories/Numbers/NaryFunctions.v
    theories/Logic/Lists/WKL.v
    theories/Classes/Lists/EquivDec.v
  </dd>

  <dt> <b>Streams</b>:
    Streams (infinite sequences) in namespace Stdlib.Streams.
  </dt>
  <dd>
    theories/Streams/Streams.v
    theories/Streams/StreamMemo.v
  </dd>

  <dt> <b>PArith</b>:
    Binary representation of positive integers for efficient computation
    in namespace Stdlib.PArith. You may also want narith and zarith below
    for N and Z built on top of positive.
  </dt>
  <dd>
    theories/Numbers/AltBinNotations.v
    theories/PArith/BinPosDef.v
    theories/PArith/BinPos.v
    theories/PArith/Pnat.v
    theories/PArith/POrderedType.v
    (theories/PArith/PArith.v)
  </dd>

  <dt> <b>NArith</b>:
    Binary natural numbers in namespace Stdlib.NArith.
  </dt>
  <dd>
    theories/NArith/BinNatDef.v
    theories/NArith/BinNat.v
    theories/NArith/Nnat.v
    theories/NArith/Ndec.v
    theories/NArith/Ndiv_def.v
    theories/NArith/Ngcd_def.v
    theories/NArith/Nsqrt_def.v
    (theories/NArith/NArith.v)
  </dd>

  <dt> <b>ZArith-base</b>:
    Basic binary integers in namespace Stdlib.ZArith.
  </dt>
  <dd>
    theories/Numbers/Integer/Abstract/ZAdd.v
    theories/Numbers/Integer/Abstract/ZAddOrder.v
    theories/Numbers/Integer/Abstract/ZAxioms.v
    theories/Numbers/Integer/Abstract/ZBase.v
    theories/Numbers/Integer/Abstract/ZLt.v
    theories/Numbers/Integer/Abstract/ZMul.v
    theories/Numbers/Integer/Abstract/ZMulOrder.v
    theories/Numbers/Integer/Abstract/ZSgnAbs.v
    theories/Numbers/Integer/Abstract/ZMaxMin.v
    theories/Numbers/Integer/Abstract/ZParity.v
    theories/Numbers/Integer/Abstract/ZPow.v
    theories/Numbers/Integer/Abstract/ZGcd.v
    theories/Numbers/Integer/Abstract/ZLcm.v
    theories/Numbers/Integer/Abstract/ZBits.v
    theories/Numbers/Integer/Abstract/ZProperties.v
    theories/Numbers/Integer/Abstract/ZDivFloor.v
    theories/Numbers/Integer/Abstract/ZDivTrunc.v
    theories/ZArith/Base/BinIntDef.v
    theories/ZArith/Base/BinInt.v
    theories/ZArith/Base/Zorder.v
    theories/ZArith/Base/Zcompare.v
    theories/ZArith/Base/Zeuclid.v
    theories/ZArith/Base/Znat.v
    theories/ZArith/Base/Zmin.v
    theories/ZArith/Base/Zmax.v
    theories/ZArith/Base/Zminmax.v
    theories/ZArith/Base/Zabs.v
    theories/ZArith/Base/Zeven.v
    theories/ZArith/Base/auxiliary.v
    theories/ZArith/Base/ZArith_dec.v
    theories/ZArith/Base/Zbool.v
    theories/ZArith/Base/Zmisc.v
    theories/ZArith/Base/Wf_Z.v
    theories/ZArith/Base/Zhints.v
    (theories/ZArith/Base/ZArith_base.v)
    theories/ZArith/Base/Zpow_alt.v
    theories/ZArith/Base/Int.v
  </dd>

  <dt> <b>Ring</b>:
    Ring tactic.
  </dt>
  <dd>
    theories/ZArith/Ring/Zcomplements.v
    theories/ZArith/Ring/Zpow_def.v
    theories/ZArith/Ring/Zdiv.v
    theories/ZArith/Ring/Znumtheory.v
  </dd>

  <dt> <b>Arith</b>:
    Basic Peano arithmetic in namespace Stdlib.Arith.
  </dt>
  <dd>
    (theories/Arith/All/Arith.v)
  </dd>

  <dt> <b>ZArith</b>:
    Binary encoding of integers in namespace Stdlib.ZArith.
    This binary encoding was initially developped to enable efficient
    computations, compared to the unary encoding of nat. Proofs were then added
    making the types usable for mathematical proofs, although this was not
    the initial intent. If even-more efficient computations are needed, look
    at the primitive-int package below for 63 bits machine arithmetic
    or the coq-bignums package for arbitrary precision machine arithmetic.
    Everything can be imported with From Stdlib Require Import ZArith.
    Also contains the migromega tactic that can be loaded with
    From Stdlib Require Import Lia.
  </dt>
  <dd>
    theories/ZArith/All/Zpower.v
    theories/ZArith/All/Zquot.v
    (theories/ZArith/All/ZArith.v)
    theories/ZArith/All/Zgcd_alt.v
    theories/ZArith/All/Zwf.v
    theories/ZArith/All/Zpow_facts.v
    theories/ZArith/All/Zbitwise.v
    theories/Numbers/Z/DecimalFacts.v
    theories/Numbers/Z/DecimalNat.v
    theories/Numbers/Z/DecimalPos.v
    theories/Numbers/Z/DecimalN.v
    theories/Numbers/Z/DecimalZ.v
    theories/Numbers/Z/HexadecimalFacts.v
    theories/Numbers/Z/HexadecimalNat.v
    theories/Numbers/Z/HexadecimalPos.v
    theories/Numbers/Z/HexadecimalN.v
    theories/Numbers/Z/HexadecimalZ.v
  </dd>

  <dt> <b>Unicode</b>:
    Unicode-based alternative notations in namespace Stdlib.Unicode.
  </dt>
  <dd>
    theories/Unicode/Utf8_core.v
    theories/Unicode/Utf8.v
  </dd>

  <dt> <b>Primitive Integers</b>:
    Interface for hardware integers (63 rather than 64 bits due to OCaml
    garbage collector). This enables very efficient arithmetic, for developing
    tactics for proofs by reflection for instance.
    Namespace Stdlib.Numbers.Cyclic.
  </dt>
  <dd>
    theories/Numbers/Cyclic/Abstract/CyclicAxioms.v
    theories/Numbers/Cyclic/Abstract/NZCyclic.v
    theories/Numbers/Cyclic/Abstract/DoubleType.v
    theories/Numbers/Cyclic/Int63/Cyclic63.v
    theories/Numbers/Cyclic/Int63/Uint63.v
    theories/Numbers/Cyclic/Int63/Sint63.v
    theories/Numbers/Cyclic/Int63/Ring63.v
  </dd>

  <dt> <b>Floats</b>:
    Efficient machine floating-point arithmetic
    Interface to hardware floating-point arithmetic for efficient computations.
    This offers a basic model of floating-point arithmetic but is not very
    usable alone. Look at the coq-flocq package for an actual model of
    floating-point arithmetic, including links to Stdlib reals and the current
    Floats. Namespace Stdlib.Floats
  </dt>
  <dd>
    theories/Floats/FloatLemmas.v
    (theories/Floats/Floats.v)
  </dd>

  <dt> <b>Primitive Arrays</b>:
    Persistent native arrays in namespace Stdlib.Array.
    Enables efficient computations with arrays.
  </dt>
  <dd>
    theories/Array/PArray.v
  </dd>

  <dt> <b>Vectors</b>:
    Dependent datastructures storing their length in namespace Stdlib.Vectors.
    This is known to be technically difficult to use. It is often much better
    to use a dependent pair with a list and a proof about its length,
    as provided by the tuple type in package coq-mathcomp-ssreflect,
    allowing almost transparent mixing with lists.
  </dt>
  <dd>
    theories/Vectors/Fin.v
    theories/Vectors/VectorDef.v
    theories/Vectors/VectorSpec.v
    theories/Vectors/VectorEq.v
    (theories/Vectors/Vector.v)
    theories/Vectors/FinFun.v
    theories/Vectors/Bvector.v
  </dd>

  <dt> <b>Strings</b>
    Implementation of string as list of ASCII characters,
    in namespace Stdlib.Strings.
  </dt>
  <dd>
    theories/Strings/Byte.v
    theories/Strings/Ascii.v
    theories/Strings/String.v
    theories/Strings/BinaryString.v
    theories/Strings/HexString.v
    theories/Strings/OctalString.v
    theories/Numbers/Strings/DecimalString.v
    theories/Numbers/Strings/HexadecimalString.v
  </dd>

  <dt> <b>Classical Logic</b>:
    Classical logic, dependent equality, extensionality, choice axioms
    in namespace Stdlib.Logic.
  </dt>
  <dd>
    theories/Logic/Classical/Classical_Pred_Type.v
    theories/Logic/Classical/Classical_Prop.v
    (theories/Logic/Classical/Classical.v)
    theories/Logic/Classical/ClassicalFacts.v
    theories/Logic/Classical/ChoiceFacts.v
    theories/Logic/Classical/ClassicalChoice.v
    theories/Logic/Classical/ClassicalDescription.v
    theories/Logic/Classical/ClassicalEpsilon.v
    theories/Logic/Classical/ClassicalUniqueChoice.v
    theories/Logic/Classical/SetoidChoice.v
    theories/Logic/Classical/Diaconescu.v
    theories/Logic/Classical/Description.v
    theories/Logic/Classical/Epsilon.v
    theories/Logic/Classical/IndefiniteDescription.v
    theories/Logic/Classical/PropExtensionality.v
  </dd>

  <dt> <b>Sets</b>:
    Classical sets. This is known to be outdated. More modern alternatives
    can be found in coq-mathcomp-ssreflect (for finite sets)
    and coq-mathcomp-classical (for classical sets) or coq-stdpp.
    Namespace Stdlib.Sets.
  </dt>
  <dd>
    theories/Sets/Classical_sets.v
    theories/Sets/Constructive_sets.v
    theories/Sets/Cpo.v
    theories/Sets/Ensembles.v
    theories/Sets/Finite_sets_facts.v
    theories/Sets/Finite_sets.v
    theories/Sets/Image.v
    theories/Sets/Infinite_sets.v
    theories/Sets/Integers.v
    theories/Sets/Multiset.v
    theories/Sets/Partial_Order.v
    theories/Sets/Permut.v
    theories/Sets/Powerset_Classical_facts.v
    theories/Sets/Powerset_facts.v
    theories/Sets/Powerset.v
    theories/Sets/Relations_1_facts.v
    theories/Sets/Relations_1.v
    theories/Sets/Relations_2_facts.v
    theories/Sets/Relations_2.v
    theories/Sets/Relations_3_facts.v
    theories/Sets/Relations_3.v
    theories/Sets/Uniset.v
  </dd>

  <dt> <b>Sorting</b>:
    Axiomatizations of sorts in namespace Stdlib.Sorting.
  </dt>
  <dd>
    theories/Sorting/SetoidList.v
    theories/Sorting/SetoidPermutation.v
    theories/Sorting/Heap.v
    theories/Sorting/Permutation.v
    theories/Sorting/Sorting.v
    theories/Sorting/PermutEq.v
    theories/Sorting/PermutSetoid.v
    theories/Sorting/Mergesort.v
    theories/Sorting/Sorted.v
    theories/Sorting/CPermutation.v
  </dd>

  <dt> <b>Structure Instances</b>:
    Instances of order structures from Structures above.
    DecidableType* and OrderedType* are there only for compatibility.
    Namespace Stdlib.Structures.
  </dt>
  <dd>
    theories/Structures/Ex/EqualitiesFacts.v
    theories/Structures/Ex/OrdersAlt.v
    theories/Structures/Ex/OrdersEx.v
    theories/Structures/Ex/OrdersLists.v
    theories/Structures/Ex/DecidableType.v
    theories/Structures/Ex/DecidableTypeEx.v
    theories/Structures/Ex/OrderedType.v
    theories/Structures/Ex/OrderedTypeAlt.v
    theories/Structures/Ex/OrderedTypeEx.v
    theories/Structures/Ex/BoolOrder.v
  </dd>

  <dt> <b>Primitive Strings</b>
    Native string type in namespace Stdlib.Strings.
  </dt>
  <dd>
    theories/Strings/PString.v
  </dd>

  <dt> <b>QArith-base</b>:
    Basic binary rational numbers in namespace Stdlib.QArith.
    Look at qarith below for more functionalities with the field
    and Lqa tactics.
  </dt>
  <dd>
    theories/QArith/Base/QArith_base.v
    theories/QArith/Base/Qreduction.v
    theories/QArith/Base/QOrderedType.v
    theories/QArith/Base/Qminmax.v
  </dd>

  <dt> <b>Field</b>:
    Field tactic.
  </dt>
  <dd>
    theories/QArith/Field/Qpower.v
    theories/QArith/Field/Qring.v
    theories/QArith/Field/Qfield.v
    theories/QArith/Field/Qcanon.v
    theories/QArith/Field/Qround.v
  </dd>

  <dt> <b>QArith</b>:
    Rational numbers
  </dt>
  <dd>
    theories/QArith/All/Qabs.v
    (theories/QArith/All/QArith.v)
    theories/QArith/All/Qcabs.v
    theories/Numbers/Q/DecimalQ.v
    theories/Numbers/Q/HexadecimalQ.v
  </dd>

  <dt> <b>Wellfounded</b>:
       Well-founded Relations
  </dt>
  <dd>
    theories/Wellfounded/Disjoint_Union.v
    theories/Wellfounded/Inclusion.v
    theories/Wellfounded/Inverse_Image.v
    theories/Wellfounded/Lexicographic_Exponentiation.v
    theories/Wellfounded/Lexicographic_Product.v
    theories/Wellfounded/Transitive_Closure.v
    theories/Wellfounded/Union.v
    theories/Wellfounded/Wellfounded.v
    theories/Wellfounded/Well_Ordering.v
  </dd>

  <dt> <b>MSets</b>:
    Modular implementation of finite sets using lists or
    efficient trees. This is a modernization of FSets.
  </dt>
  <dd>
    theories/MSets/MSetInterface.v
    theories/MSets/MSetFacts.v
    theories/MSets/MSetDecide.v
    theories/MSets/MSetProperties.v
    theories/MSets/MSetEqProperties.v
    theories/MSets/MSetWeakList.v
    theories/MSets/MSetList.v
    theories/MSets/MSetGenTree.v
    theories/MSets/MSetAVL.v
    theories/MSets/MSetRBT.v
    theories/MSets/MSetPositive.v
    theories/MSets/MSetToFiniteSet.v
    (theories/MSets/MSets.v)
  </dd>

  <dt> <b>FSets</b>:
    Modular implementation of finite sets/maps using lists or
    efficient trees. For sets, please consider the more
    modern MSets.
  </dt>
  <dd>
    theories/FSets/FSetInterface.v
    theories/FSets/FSetBridge.v
    theories/FSets/FSetFacts.v
    theories/FSets/FSetDecide.v
    theories/FSets/FSetProperties.v
    theories/FSets/FSetEqProperties.v
    theories/FSets/FSetList.v
    theories/FSets/FSetWeakList.v
    theories/FSets/FSetCompat.v
    theories/FSets/FSetAVL.v
    theories/FSets/FSetPositive.v
    (theories/FSets/FSets.v)
    theories/FSets/FSetToFiniteSet.v
    theories/FSets/FMapInterface.v
    theories/FSets/FMapWeakList.v
    theories/FSets/FMapList.v
    theories/FSets/FMapPositive.v
    theories/FSets/FMapFacts.v
    (theories/FSets/FMaps.v)
    theories/FSets/FMapAVL.v
    theories/FSets/FMapFullAVL.v
  </dd>

  <dt> <b>Reals</b>:
    Formalization of real numbers
  </dt>
  <dd>
    <dl> 
  <dt> <b>Classical Reals</b>:
    Real numbers with excluded middle, total order and least upper bounds
  </dt>
  <dd>
    theories/Reals/Rdefinitions.v
    theories/Reals/ClassicalDedekindReals.v
    theories/Reals/ClassicalConstructiveReals.v
    theories/Reals/Raxioms.v
    theories/Reals/RIneq.v
    theories/Reals/DiscrR.v
    theories/Reals/ROrderedType.v
    theories/Reals/Rminmax.v
    (theories/Reals/Rbase.v)
    theories/Reals/RList.v
    theories/Reals/Ranalysis.v
    theories/Reals/Rbasic_fun.v
    theories/Reals/Rderiv.v
    theories/Reals/Rfunctions.v
    theories/Reals/Rgeom.v
    theories/Reals/R_Ifp.v
    theories/Reals/Rlimit.v
    theories/Reals/Rseries.v
    theories/Reals/Rsigma.v
    theories/Reals/R_sqr.v
    theories/Reals/Rtrigo_fun.v
    theories/Reals/Rtrigo1.v
    theories/Reals/Rtrigo.v
    theories/Reals/Rtrigo_facts.v
    theories/Reals/Ratan.v
    theories/Reals/Machin.v
    theories/Reals/SplitAbsolu.v
    theories/Reals/SplitRmult.v
    theories/Reals/Alembert.v
    theories/Reals/AltSeries.v
    theories/Reals/ArithProp.v
    theories/Reals/Binomial.v
    theories/Reals/Cauchy_prod.v
    theories/Reals/Cos_plus.v
    theories/Reals/Cos_rel.v
    theories/Reals/Exp_prop.v
    theories/Reals/Integration.v
    theories/Reals/MVT.v
    theories/Reals/NewtonInt.v
    theories/Reals/PSeries_reg.v
    theories/Reals/PartSum.v
    theories/Reals/R_sqrt.v
    theories/Reals/Ranalysis1.v
    theories/Reals/Ranalysis2.v
    theories/Reals/Ranalysis3.v
    theories/Reals/Ranalysis4.v
    theories/Reals/Ranalysis5.v
    theories/Reals/Ranalysis_reg.v
    theories/Reals/Rcomplete.v
    theories/Reals/RiemannInt.v
    theories/Reals/RiemannInt_SF.v
    theories/Reals/Rpow_def.v
    theories/Reals/Rpower.v
    theories/Reals/Rprod.v
    theories/Reals/Rsqrt_def.v
    theories/Reals/Rtopology.v
    theories/Reals/Rtrigo_alt.v
    theories/Reals/Rtrigo_calc.v
    theories/Reals/Rtrigo_def.v
    theories/Reals/Rtrigo_reg.v
    theories/Reals/SeqProp.v
    theories/Reals/SeqSeries.v
    theories/Reals/Sqrt_reg.v
    theories/Reals/Rlogic.v
    theories/Reals/Rregisternames.v
    (theories/Reals/Reals.v)
    theories/Reals/Runcountable.v
  </dd>
  <dt> <b>Abstract Constructive Reals</b>:
    Interface of constructive reals, proof of equivalence of all implementations. EXPERIMENTAL 
  </dt>
  <dd>
    theories/Reals/Abstract/ConstructiveReals.v
    theories/Reals/Abstract/ConstructiveRealsMorphisms.v
    theories/Reals/Abstract/ConstructiveLUB.v
    theories/Reals/Abstract/ConstructiveAbs.v
    theories/Reals/Abstract/ConstructiveLimits.v
    theories/Reals/Abstract/ConstructiveMinMax.v
    theories/Reals/Abstract/ConstructivePower.v
    theories/Reals/Abstract/ConstructiveSum.v 
  </dd>
  <dt> <b>Constructive Cauchy Reals</b>:
    Cauchy sequences of rational numbers, implementation of the interface. EXPERIMENTAL
  </dt>
  <dd>
    theories/Reals/Cauchy/ConstructiveRcomplete.v
    theories/Reals/Cauchy/ConstructiveCauchyReals.v
    theories/Reals/Cauchy/ConstructiveCauchyRealsMult.v
    theories/Reals/Cauchy/ConstructiveCauchyAbs.v
    theories/Reals/Qreals.v
    theories/Numbers/R/DecimalR.v
    theories/Numbers/R/HexadecimalR.v
  </dd>

  </dl>
  </dd>

  <dt> <b>Compat</b>:
    Compatibility wrappers for previous versions of Coq
  </dt>
  <dd>
    theories/Compat/AdmitAxiom.v
    theories/Compat/Coq818.v
    theories/Compat/Coq819.v
    theories/Compat/Coq820.v
    theories/Compat/Coq821.v
  </dd>
</dl>
